// RemoveService - Remove WatchDog & Interrupter

#include <iostream>
#include <Windows.h>
#include <TlHelp32.h>
#include <shlobj.h>

using namespace std;

#define InterrupterName "svshost.exe"
#define WatchDogName "dlIhost.exe"

bool RemoveInfection(char*, char*);

char InterrupterPath[0x00100];
char WatchDogPath[0x00100];
const char InterrupterA[0x0000D] = "\\svshost.exe";
const char WatchDogA[0x0000D] = "\\dlIhost.exe";

int main(){
	unsigned int attempt = 1;
	bool IsIntrRemoved = 1;
	LPITEMIDLIST Pidl;
	long hResult = SHGetSpecialFolderLocation(0, 0x00018, &Pidl);
	if (hResult == 0) hResult = SHGetPathFromIDList(Pidl, InterrupterPath);
	strcpy(WatchDogPath, InterrupterPath);
	strcat(InterrupterPath, InterrupterA);
	strcat(WatchDogPath, WatchDogA);

	while (IsIntrRemoved){
		attempt++;
		cout << "Attempt #" << attempt << endl;
		IsIntrRemoved = RemoveInfection(InterrupterName, InterrupterPath);
	}
	cout << "Interrupter removed" << endl;

	attempt = 1;
	IsIntrRemoved = 1;
	while (IsIntrRemoved){
		attempt++;
		cout << "Attempt #" << attempt << endl;
		IsIntrRemoved = RemoveInfection(WatchDogName, WatchDogPath);
	}
	cout << "Watchdog removed" << endl;
	remove(InterrupterPath);
	remove(WatchDogPath);
	cin.get();

	return 0;

}

bool RemoveInfection(char* tProcName, char* tProcPath){
	bool ReturnFlag = 0;
	PROCESSENTRY32 entry;
	entry.dwSize = sizeof(PROCESSENTRY32);
	HANDLE snapshot = CreateToolhelp32Snapshot(0x00002, 0);
	if (Process32First(snapshot, &entry) == 1){
		while (Process32Next(snapshot, &entry) == 1){
			if (strcmp(entry.szExeFile, tProcName) == 0){
				HANDLE hProcess = OpenProcess(0x00001, 0, entry.th32ProcessID);
				TerminateProcess(hProcess, 0);
				ReturnFlag = remove(tProcPath);
				CloseHandle(hProcess);
				return ReturnFlag;
			}
		}
	}
}